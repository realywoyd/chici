// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let coins = 0;
let level = 1;
let energy = 100;
let maxEnergy = 100;
let clickMultiplier = 1;
let energyRecoveryRate = 5000; // –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
let autoClickerActive = false;
let autoClickerInterval;
let isFreeTapBoostActive = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É—Å—Ç–∞

// –ë—É—Å—Ç—ã
const boosts = {
    tapMultiplier: { level: 1, cost: 100 },
    maxEnergy: { level: 1, cost: 200 },
    energyRecovery: { level: 1, cost: 300 },
    autoClicker: { cost: 100000 },
    freeTapBoost: { usesLeft: 3 } // –ù–æ–≤—ã–π –±—É—Å—Ç: 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–µ–Ω—å
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveGame() {
    const gameData = {
        coins,
        level,
        energy,
        maxEnergy,
        clickMultiplier,
        energyRecoveryRate,
        autoClickerActive,
        boosts
    };
    localStorage.setItem('shibaGameData', JSON.stringify(gameData));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadGame() {
    const savedData = localStorage.getItem('shibaGameData');
    if (savedData) {
        const gameData = JSON.parse(savedData);
        coins = gameData.coins;
        level = gameData.level;
        energy = gameData.energy;
        maxEnergy = gameData.maxEnergy;
        clickMultiplier = gameData.clickMultiplier;
        energyRecoveryRate = gameData.energyRecoveryRate;
        autoClickerActive = gameData.autoClickerActive;
        boosts.tapMultiplier = gameData.boosts.tapMultiplier;
        boosts.maxEnergy = gameData.boosts.maxEnergy;
        boosts.energyRecovery = gameData.boosts.energyRecovery;
        boosts.autoClicker = gameData.boosts.autoClicker;
        boosts.freeTapBoost = gameData.boosts.freeTapBoost || { usesLeft: 3 }; // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±—É—Å—Ç

        if (autoClickerActive) {
            activateAutoClicker();
        }
    }
    updateUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('coins-panel').textContent = coins;
    document.getElementById('energy-panel').textContent = energy;
    document.getElementById('max-energy-panel').textContent = maxEnergy;
    document.getElementById('level-panel').textContent = level;
    updateBoostsModal(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—É—Å—Ç–æ–≤
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
function addCoins() {
    if (isFreeTapBoostActive || energy > 0) { // –ï—Å–ª–∏ –±—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è
        coins += 1 * clickMultiplier;
        if (!isFreeTapBoostActive) { // –ï—Å–ª–∏ –±—É—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Ç—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
            energy--;
        }
        updateUI();
        saveGame();
    } else {
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏—Ç–∞—á–∞
function handleMultiTouch(event) {
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ)
    const touches = event.touches; // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Å–∞–Ω–∏—è

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∫–∞—Å–∞–Ω–∏–µ
    for (let i = 0; i < touches.length; i++) {
        const touch = touches[i];
        animateShiba(touch); // –ê–Ω–∏–º–∏—Ä—É–µ–º –®–∏–±—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –®–∏–±—ã
function animateShiba(event) {
    const shiba = document.querySelector('.shiba');

    // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞
    shiba.classList.add('hit');
    setTimeout(() => shiba.classList.remove('hit'), 200);

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±—ã—á–∏ –º–æ–Ω–µ—Ç
    const coinEffect = document.createElement('div');
    coinEffect.className = 'coin-effect';
    coinEffect.textContent = `+${1 * clickMultiplier}`;
    coinEffect.style.left = `${event.clientX || event.touches[0].clientX}px`; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º—ã—à–∏, –∏ —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π
    coinEffect.style.top = `${event.clientY || event.touches[0].clientY}px`;
    document.body.appendChild(coinEffect);
    setTimeout(() => coinEffect.remove(), 1000);

    addCoins(); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
function recoverEnergy() {
    if (energy < maxEnergy) {
        energy++;
        updateUI();
        saveGame();
    }
}

setInterval(recoverEnergy, energyRecoveryRate);

// –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
function activateAutoClicker() {
    if (autoClickerActive) return;
    autoClickerActive = true;
    autoClickerInterval = setInterval(() => {
        if (energy > 0) {
            addCoins();
        }
    }, 1000);
    saveGame();
}

// –ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–æ–≤
function buyBoost(boostType) {
    const boost = boosts[boostType];
    if (coins >= boost.cost) {
        coins -= boost.cost;
        if (boostType === 'tapMultiplier') {
            clickMultiplier = boost.level + 1;
            boost.level++;
            boost.cost *= 2;
        } else if (boostType === 'maxEnergy') {
            maxEnergy += 50;
            boost.level++;
            boost.cost *= 2;
        } else if (boostType === 'energyRecovery') {
            energyRecoveryRate = Math.max(1000, energyRecoveryRate - 1000);
            boost.level++;
            boost.cost *= 2;
        } else if (boostType === 'autoClicker') {
            activateAutoClicker();
        }
        updateUI();
        updateBoostsModal();
        saveGame();
    } else {
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
    }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∞ –Ω–∞ —Ç–∞–ø—ã
function activateFreeTapBoost() {
    if (boosts.freeTapBoost.usesLeft > 0) {
        const randomMultiplier = Math.floor(Math.random() * 49) + 2; // –°–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç 2 –¥–æ 50
        clickMultiplier *= randomMultiplier;
        boosts.freeTapBoost.usesLeft--;
        isFreeTapBoostActive = true; // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É—Å—Ç

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –±—É—Å—Ç–∞–º–∏
        closeModal('boosts-modal');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showBoostNotification();

        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
        startFallingCoins();

        // –°–±—Ä–æ—Å –±—É—Å—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            clickMultiplier /= randomMultiplier;
            isFreeTapBoostActive = false; // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É—Å—Ç
            stopFallingCoins(); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç
            updateUI();
        }, 10000);

        updateUI();
        updateBoostsModal();
        saveGame();
    } else {
        alert("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±—É—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!");
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—É—Å—Ç–µ
function showBoostNotification() {
    const notification = document.createElement('div');
    notification.className = 'boost-notification';
    notification.textContent = '–ë—É—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–∞–ø—ã —É—Å–∏–ª–µ–Ω—ã!';
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 3000); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
function startFallingCoins() {
    const coinInterval = setInterval(() => {
        createCoin();
    }, 200); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É –∫–∞–∂–¥—ã–µ 200 –º—Å

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        clearInterval(coinInterval);
    }, 10000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
function createCoin() {
    const coin = document.createElement('div');
    coin.className = 'coin';
    coin.textContent = 'üí∞'; // –≠–º–æ–¥–∑–∏ –º–æ–Ω–µ—Ç—ã
    coin.style.left = `${Math.random() * 100}vw`; // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    coin.style.animationDuration = `${Math.random() * 2 + 3}s`; // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è
    document.body.appendChild(coin);

    // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    coin.addEventListener('animationend', () => {
        coin.remove();
    });
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
function stopFallingCoins() {
    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –æ—á–∏—â–µ–Ω –≤ startFallingCoins, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±—É—Å—Ç–æ–≤
function updateBoostsModal() {
    const boostsList = document.getElementById('boosts-list');
    boostsList.innerHTML = '';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∞
    const freeBoostUses = document.querySelector('.free-boosts-panel .boost-uses');
    freeBoostUses.textContent = `${boosts.freeTapBoost.usesLeft}/3`;

    for (const [boostType, boost] of Object.entries(boosts)) {
        if (boostType === 'freeTapBoost') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±—É—Å—Ç

        const boostItem = document.createElement('div');
        boostItem.className = 'boost-item';

        let boostText;
        if (boostType === 'tapMultiplier') {
            boostText = `–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–ø–æ–≤ x${boost.level + 1}`;
        } else if (boostType === 'maxEnergy') {
            boostText = `–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ +50 (–£—Ä–æ–≤–µ–Ω—å ${boost.level})`;
        } else if (boostType === 'energyRecovery') {
            boostText = `–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏: 1 –µ–¥. –≤ ${energyRecoveryRate / 1000} —Å–µ–∫ (–£—Ä–æ–≤–µ–Ω—å ${boost.level})`;
        } else if (boostType === 'autoClicker') {
            boostText = `–†–æ–±–æ—Ç`;
        }

        boostItem.innerHTML = `
            <span>${boostText}</span>
            <button onclick="buyBoost('${boostType}')" ${coins < boost.cost ? 'disabled' : ''}>
                –ö—É–ø–∏—Ç—å –∑–∞ ${boost.cost} –º–æ–Ω–µ—Ç
            </button>
        `;
        boostsList.appendChild(boostItem);
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±—É—Å—Ç–æ–≤
function showBoostsModal() {
    updateBoostsModal();
    const modal = document.getElementById('boosts-modal');
    modal.style.display = 'flex';
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function showSettingsModal() {
    const modal = document.getElementById('settings-modal');
    modal.style.display = 'flex';
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–ª–µ—Å–∞ —É–¥–∞—á–∏
function showWheel() {
    const modal = document.getElementById('wheel-modal');
    modal.style.display = 'flex';
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Airdrop
function showAirdropModal() {
    const modal = document.getElementById('airdrop-modal');
    modal.style.display = 'flex';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ Telegram Wallet
function connectWallet() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        const tg = Telegram.WebApp;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
        if (!tg.openWallet) {
            alert('–í–∞—à–∞ –≤–µ—Ä—Å–∏—è Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞.');
            return;
        }

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—à–µ–ª—å–∫–∞
        tg.openWallet({
            amount: 0, // –°—É–º–º–∞ 0 –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
            currency: 'TON', // –í–∞–ª—é—Ç–∞
            description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞', // –û–ø–∏—Å–∞–Ω–∏–µ
        }, (status) => {
            if (status === 'paid') {
                // –ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω
                alert('–ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω!');
                // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                const walletAddress = tg.initDataUnsafe.user?.wallet_address;
                if (walletAddress) {
                    localStorage.setItem('walletAddress', walletAddress);
                    console.log('–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:', walletAddress);

                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
                    const walletAddressDisplay = document.getElementById('wallet-address-display');
                    if (walletAddressDisplay) {
                        walletAddressDisplay.textContent = walletAddress;
                    }
                }
            } else {
                alert('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.');
            }
        });
    } else {
        alert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram Mini Apps.');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.style.display = 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
let currentLanguage = 'ru'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π

function toggleLanguage() {
    const toggle = document.getElementById('language-toggle');
    currentLanguage = toggle.checked ? 'en' : 'ru'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    updateLanguage(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
}

function updateLanguage() {
    const elementsToTranslate = {
        'coins-panel': { ru: '–ú–æ–Ω–µ—Ç—ã', en: 'Coins' },
        'energy-panel': { ru: '–≠–Ω–µ—Ä–≥–∏—è', en: 'Energy' },
        'level-panel': { ru: '–£—Ä–æ–≤–µ–Ω—å', en: 'Level' },
        'clan-text': { ru: '–ö–ª–∞–Ω', en: 'Clan' },
        'rating-text': { ru: '–†–µ–π—Ç–∏–Ω–≥', en: 'Rating' },
        'wheel-text': { ru: '–ö–æ–ª–µ—Å–æ –£–¥–∞—á–∏', en: 'Wheel of Fortune' },
        'boost-text': { ru: '–ë—É—Å—Ç—ã', en: 'Boosts' },
        'shop-text': { ru: '–ú–∞–≥–∞–∑–∏–Ω', en: 'Shop' },
        'friends-text': { ru: '–î—Ä—É–∑—å—è', en: 'Friends' },
        'airdrop-text': { ru: 'Airdrop', en: 'Airdrop' },
        'roi-text': { ru: '–†–æ–∏', en: 'Swarms' },
        'settings-title': { ru: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', en: 'Settings' },
        'label-ru': { ru: 'RU', en: 'RU' },
        'label-en': { ru: 'ENG', en: 'ENG' }
    };

    for (const [selector, translations] of Object.entries(elementsToTranslate)) {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = translations[currentLanguage];
        }
    }
}

// –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏
const wheel = document.getElementById('wheel');
let isSpinning = false;

const rewards = [
    { icon: "fas fa-coins", text: "50 –º–æ–Ω–µ—Ç", action: () => coins += 50 },
    { icon: "fas fa-bolt", text: "20 —ç–Ω–µ—Ä–≥–∏–∏", action: () => energy += 20 },
    { icon: "fas fa-rocket", text: "x2 –¥–æ—Ö–æ–¥", action: () => clickMultiplier *= 2 },
    { icon: "fas fa-wine-bottle", text: "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", action: () => energyDrinks++ },
    { icon: "fas fa-network-wired", text: "–†–æ–π", action: () => swarms++ },
    { icon: "fas fa-crown", text: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –®–∏–±–∞", action: () => alert("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –®–∏–±–∞!") },
    { icon: "fas fa-gem", text: "1000 –º–æ–Ω–µ—Ç", action: () => coins += 1000 },
    { icon: "fas fa-battery-full", text: "–°—É–ø–µ—Ä-—ç–Ω–µ—Ä–≥–∏—è", action: () => maxEnergy += 50 },
    { icon: "fas fa-star", text: "–ó–≤–µ–∑–¥–∞ —É–¥–∞—á–∏", action: () => alert("–ó–≤–µ–∑–¥–∞ —É–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!") },
    { icon: "fas fa-gift", text: "–°—é—Ä–ø—Ä–∏–∑", action: () => coins += Math.floor(Math.random() * 500) }
];

const sectionAngles = [18, 54, 90, 126, 162, 198, 234, 270, 306, 342];

function spinWheel() {
    if (isSpinning) return;

    const button = document.querySelector('.spin-button');
    button.disabled = true;
    isSpinning = true;

    const randomRotation = 360 * 5 + Math.floor(Math.random() * 360);
    wheel.style.transition = 'transform 5s cubic-bezier(0.25, 0.1, 0.25, 1)';
    wheel.style.transform = `rotate(${randomRotation}deg)`;

    setTimeout(() => {
        const degrees = randomRotation % 360;
        const pointerAngle = (360 - degrees) % 360;

        let closestAngle = sectionAngles[0];
        let minDifference = Math.abs(pointerAngle - closestAngle);

        for (let i = 1; i < sectionAngles.length; i++) {
            const difference = Math.abs(pointerAngle - sectionAngles[i]);
            if (difference < minDifference) {
                minDifference = difference;
                closestAngle = sectionAngles[i];
            }
        }

        const rewardIndex = sectionAngles.indexOf(closestAngle);
        const reward = rewards[rewardIndex];

        reward.action();
        alert(`–í—ã –ø–æ–ª—É—á–∏–ª–∏: ${reward.text}`);
        updateUI();
        saveGame();

        button.disabled = false;
        isSpinning = false;
    }, 5000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
window.onload = function() {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const progressBar = document.getElementById('progress-bar-inner');
    const loadingContainer = document.querySelector('.loading-container');
    const gameContainer = document.querySelector('.game-container');
    let progress = 0;

    const loadingInterval = setInterval(() => {
        progress += 10;
        progressBar.style.width = `${progress}%`;

        if (progress >= 100) {
            clearInterval(loadingInterval);
            // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
            loadingContainer.style.display = 'none';
            gameContainer.style.display = 'block';
            initializeGame(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        }
    }, 300);

    function initializeGame() {
        loadGame();
        updateUI();
        updateLanguage(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ Telegram Mini Apps
        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
            const tg = Telegram.WebApp;
            tg.ready(); // –ì–æ—Ç–æ–≤–∏–º Mini App –∫ —Ä–∞–±–æ—Ç–µ
            tg.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
            const connectWalletButton = document.querySelector('.connect-wallet-button');
            if (connectWalletButton) {
                connectWalletButton.style.display = 'none';
            }

            // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const airdropContent = document.querySelector('.airdrop-content');
            if (airdropContent) {
                airdropContent.innerHTML = '<p>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram Mini Apps.</p>';
            }
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Mini Apps
function requestPayment(amount, description) {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        const tg = Telegram.WebApp;

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        const paymentData = {
            amount: amount, // –°—É–º–º–∞ –≤ –Ω–∞–Ω–æ–¢–û–ù (1 TON = 1_000_000_000 –Ω–∞–Ω–æ–¢–û–ù)
            currency: 'TON', // –í–∞–ª—é—Ç–∞
            description: description, // –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
        tg.sendData(JSON.stringify(paymentData));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞
        tg.onEvent('invoiceClosed', (eventData) => {
            if (eventData.status === 'paid') {
                alert('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
                // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞ –≤ –∏–≥—Ä–µ
                handleDonationSuccess();
            } else {
                alert('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å.');
            }
        });
    } else {
        alert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram Mini Apps.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–Ω–∞—Ç–∞
function handleDonationSuccess() {
    coins += 1000; // –ù–∞—á–∏—Å–ª—è–µ–º 1000 –º–æ–Ω–µ—Ç
    updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1000 –º–æ–Ω–µ—Ç.');
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–∞
function showDonateModal() {
    const modal = document.getElementById('donate-modal');
    modal.style.display = 'flex';

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const walletAddressDisplay = document.getElementById('wallet-address-display');
    walletAddressDisplay.textContent = localStorage.getItem('walletAddress') || '–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω';
}

// –ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞ –∑–∞ 1$
async function buySpin() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        const tg = Telegram.WebApp;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å TON/USD
        const tonPrice = await getTonPrice();
        if (!tonPrice) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å TON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –Ω–∞–Ω–æ–¢–û–ù –¥–ª—è 1$
        const amountInNanoTon = calculateNanoTonForDollar(tonPrice);

        const description = "–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞ –Ω–∞ –ö–æ–ª–µ—Å–µ –£–¥–∞—á–∏";

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        const invoice = {
            currency: 'TON',
            amount: amountInNanoTon.toString(), // –°—É–º–º–∞ –≤ –Ω–∞–Ω–æ–¢–û–ù
            description: description,
        };

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å
        tg.openInvoice(invoice, (status) => {
            if (status === 'paid') {
                alert('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏–Ω.');
                addSpin(); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω
            } else {
                alert('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å.');
            }
        });
    } else {
        alert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram Mini Apps.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ TON/USD —á–µ—Ä–µ–∑ CoinGecko
async function getTonPrice() {
    try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=usd');
        const data = await response.json();
        return data['the-open-network'].usd;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ TON:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –≤ –Ω–∞–Ω–æ–¢–û–ù –¥–ª—è 1$
function calculateNanoTonForDollar(tonPrice) {
    const dollars = 1; // –°—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const tonAmount = dollars / tonPrice; // –°—É–º–º–∞ –≤ TON
    const nanoTonAmount = tonAmount * 1_000_000_000; // –°—É–º–º–∞ –≤ –Ω–∞–Ω–æ–¢–û–ù
    return Math.round(nanoTonAmount); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–Ω–∞
function addSpin() {
    const spinButton = document.querySelector('.spin-button');
    spinButton.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–ø–∏–Ω–∞
    alert('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏–Ω!');
}
